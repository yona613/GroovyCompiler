// Translation from Main.vm to Hack assembly
// @Avraham Glasberg, @YonaSzmerla
@256
D=A
@SP
M=D
(RETURN_ADDRESS_Sys.init_2)
@LCL
D=M
@SP
A=M
M=D
@SP
M=M-1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M-1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M-1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M-1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN_ADDRESS_Sys.init_8)//function Main.fibonacci 0
(Main.fibonacci)
//push argument 0
@2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt                     // checks if n<2
@SP
A=M-1
D=M
A=A-1
D=M-D
@LABEL_TRUE1
D;JLT
@SP
A=M-1
A=A-1
M=0
@LABEL_FALSE1
0;JMP
(LABEL_TRUE1)
@SP
A=M-1
A=A-1
M=-1
(LABEL_FALSE1)
@SP
M=M-1
//if-goto IF_TRUE
@SP
A=M
D=M
@IF_GOTO_FALSE10
D;JEQ
@IF_TRUE
0;JMP
(IF_GOTO_FALSE10)
//goto IF_FALSE
@IF_FALSE
0;JMP
//label IF_TRUE          // if n<2, return n
//push argument 0        
@2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
@RET
M=D
@SP
A=M
D=M
@ARG
M=D
@SP
M=M+1
@ARG
D=M+1
@SP
M=D
@FRAME
D=M-1
@THAT
M=D
@FRAME
D=M
@2
D=D-A
@THAT
M=D
@FRAME
D=M
@3
D=D-A
@THAT
M=D
@FRAME
D=M
@4
D=D-A
@THAT
M=D
@RET
0;JMP
//label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
//push argument 0
@2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//call Main.fibonacci 1  // computes fib(n-2)
//push argument 0
@2
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//call Main.fibonacci 1  // computes fib(n-1)
//add                    // returns fib(n-1) + fib(n-2)
@SP
A=M-1
D=M
A=A-1
M=D+M
@SP
M=M-1
//return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
@RET
M=D
@SP
A=M
D=M
@ARG
M=D
@SP
M=M+1
@ARG
D=M+1
@SP
M=D
@FRAME
D=M-1
@THAT
M=D
@FRAME
D=M
@2
D=D-A
@THAT
M=D
@FRAME
D=M
@3
D=D-A
@THAT
M=D
@FRAME
D=M
@4
D=D-A
@THAT
M=D
@RET
0;JMP
// Translation from Sys.vm to Hack assembly
// @Avraham Glasberg, @YonaSzmerla
//function Sys.init 0
(Sys.init)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1   // computes the 4'th fibonacci element
//label WHILE
(WHILE)
//goto WHILE              // loops infinitely
